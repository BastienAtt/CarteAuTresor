Choix de Méthodologie

TDD - test-driven development
    Permet a tout moment d'éviter les regressions et de corriger immediatement les potentiels bug
    Demande de la rigueur, un test pour un element a dev.
    Test a faire avant.
    Est possible car le cahier des charges n'est pas sujets a modification.

Projet non imposant une structure simple avec un meme service pour effectuer la recupDesDonnées et la simulation
Ainsi que les model :
    de la carte avec un tableau en 2D contenant pour chaque le model case
    d'une case, précisant si le type de case ( vide Montagne ou Trésor, + un boolean indiquant la présence d'un aventurier)
    de l'aventurier avec sa position, ses mouvements restants, son orientation

Sommaire element a construire :
    - l'environnement de dev (Build de l'application)
    - Construction du model Case
    - Construction du model carte -> contenant le tableaux de case plaçant les elements dans le tableau
    - Recupération du fichier d'entrée -> fichier ServiceImpl
    - Lecture du Fichiers d'entrée et Construction de l'objet carte
    - Construction du model aventurier
    - Ajout des regles de gestion -> Fichier ServiceImpl

Model Case :
    ->TestUnitaire construction
    ->dev Construction

Model Carte : 
    ->TestUnitaire construction
    ->dev Construction

Service : 
    recupPremiereLigne() -> probleme est-elle tjrs la premiere ligne ? 
        test puis implementation
    Si on ne trouve pas la premiere ligne "C" : erreur, on a pas la taille de la carte 

    Cas a prendre en compte a la création de la carte : 
    Pas de montagne : pas de soucis particulier 
    Pas de trésor : seul le placement des aventurier va changer, pas d'erreur a remonter 
    Pas d'aventurier : Dans ce cas, si on ne fait pas d'erreur alors on renvoi simplement la carte d'entrée, pas d'interet
                        On peut lever une exception pour le préciser comme une erreur dans le fichier d'entrée. 

    Cas a lors des deplacements d'aventurier : 
    "Il ne peut y avoir qu’un aventurier à la fois sur une même case. Les mouvements des aventuriers sont 
    évalués tour par tour. En cas de conflit entre mouvements sur un même tour, c’est l’ordre d’apparition 
    de l’aventurier dans le fichier qui donne la priorité des mouvements"
        Controle de la liberté de la case d'arrivé, ni montagne ni aventurier. 
        l'ordre d'apparition c'est l'ordre présent dans le fichier d'entrée : List 


    un fichier d'entree : avec M - 1 - 3 puis C - 4 - 6 est il valable ? -> doit on ignorer la montagne ? 
        Decision : on va lire la premiere ligne C arrivant, puis considerer l'ensemble des autres lignes, déclaré avant ou apres la Ligne c
            De meme, si plusieurs ligne C sont déclaré, seule la premiere est prise en compte. 